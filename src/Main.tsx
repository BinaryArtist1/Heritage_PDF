import React, { useEffect, useState } from 'react'
import moment from 'moment'
import _ from 'lodash'
import {
  Page,
  Text,
  View,
  Document,
  Image,
  StyleSheet,
  PDFDownloadLink,
  PDFViewer
} from '@react-pdf/renderer'
import FormInput from 'components/FormInput/FormInput'
import Button from 'components/Button/Button'
import { useAppDispatch, useAppSelector } from 'store/hook'
import { addToCart, selectCartData } from 'store/slices/cartSlice'
import logo from './logo.png'
import { CartItemType } from 'store/types/cartTypes'

const styles = StyleSheet.create({
  page: {
    padding: 40
  },
  section: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  title: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  statement: {
    alignItems: 'flex-end'
  },
  document: {
    backgroundColor: '#fff'
  },
  text: {
    fontSize: 10,
    marginVertical: 4
  },
  textSmall: {
    fontSize: 8,
    marginVertical: 3
  },
  textBold: {
    fontWeight: 'extrabold'
  },
  divider: {
    height: 1,
    width: '100%',
    backgroundColor: 'rgb(242 242 252)',
    marginVertical: 4
  },
  blue: {
    color: '#2888ff'
  },
  logo: {
    width: 100
  },
  logoContainer: {
    width: '100%',
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  cellContainer: {
    width: 80,
    fontSize: 10
  },
  tableRow: {
    display: 'flex',
    flexDirection: 'row',
    marginVertical: 10
  }
})

// Create Document Component
const MyDocument = ({ sales }: { sales: CartItemType[] }) => {
  const totalBill = sales.reduce((prev, sale) => {
    return prev + sale.unitPrice * sale.cartCount * (1 + sale.taxRate)
  }, 0)
  return (
    <Document style={styles.document}>
      <Page size="A4" style={styles.page}>
        <View style={styles.logoContainer}>
          <Image src={logo} style={styles.logo} />
          <View style={{ marginLeft: 20 }}>
            <Text style={{ fontSize: 11 }}>CFS Autogenerated Bill</Text>
            <Text style={{ marginTop: 10, fontWeight: 'bold' }}>
              Total Bill: ${totalBill.toFixed(2)}
            </Text>
          </View>
        </View>
      </Page>
      <Page size="A4" style={styles.page}>
        <View style={styles.tableRow}>
          <Text style={styles.cellContainer}>Product Name</Text>
          <Text style={styles.cellContainer}>Unit Price</Text>
          <Text style={styles.cellContainer}>Count</Text>
          <Text style={styles.cellContainer}>Tax Rate</Text>
          <Text style={styles.cellContainer}>Total Price</Text>
          <Text style={styles.cellContainer}>Payment</Text>
        </View>
        {sales.map((sale) => {
          return (
            <View style={styles.tableRow}>
              <Text style={styles.cellContainer}>{sale.productName}</Text>
              <Text style={styles.cellContainer}>{sale.unitPrice}</Text>
              <Text style={styles.cellContainer}>{sale.cartCount}</Text>
              <Text style={styles.cellContainer}>{sale.taxRate}</Text>
              <Text style={styles.cellContainer}>
                ${sale.unitPrice * sale.cartCount}
              </Text>
              <Text style={styles.cellContainer}>
                ${sale.unitPrice * sale.cartCount * (1 + sale.taxRate)}
              </Text>
            </View>
          )
        })}
      </Page>
    </Document>
  )
}

const Main = () => {
  const [productName, setProductName] = useState<string>('')
  const [unitPrice, setPrice] = useState<number>(NaN)
  const [cartCount, setCartCount] = useState<number>(NaN)
  const [taxRate, setTaxRate] = useState<number>(NaN)

  const dispatch = useAppDispatch()
  const sales = useAppSelector(selectCartData)

  return (
    <>
      <div className="py-4 px-12 text-center flex flex-col justify-center items-center">
        <div className="flex gap-6 items-center">
          <FormInput
            label="Product Name"
            value={productName}
            onChange={(text) => setProductName(text)}
            type="text"
            error=""
          />
          <FormInput
            label="Unit Price"
            value={unitPrice}
            onChange={(price) => setPrice(+price)}
            type="number"
            error=""
          />
          <FormInput
            label="Sold Count"
            value={cartCount}
            onChange={(count) => setCartCount(+count)}
            type="number"
            error=""
          />
          <FormInput
            label="Tax Rate"
            value={taxRate}
            onChange={(rate) => setTaxRate(+rate)}
            type="number"
            error=""
          />
        </div>
        <div className="w-64">
          <Button
            onClick={() => {
              dispatch(
                addToCart({
                  cartCount,
                  productName,
                  taxRate,
                  unitPrice,
                  id: sales.length.toString()
                })
              )
            }}
            text="Add Sale"
          />
        </div>
      </div>
      <div>
        {sales.length !== 0 && (
          <table className="table table-auto w-full text-center border">
            <thead>
              <tr>
                <th>Product Name</th>
                <th>Unit Price</th>
                <th>Count</th>
                <th>Tax Rate</th>
                <th>Total Price</th>
                <th>Payment</th>
              </tr>
            </thead>
            <tbody>
              {sales.map((sale) => {
                return (
                  <tr>
                    <td>{sale.productName}</td>
                    <td>{sale.unitPrice}</td>
                    <td>{sale.cartCount}</td>
                    <td>{sale.taxRate}</td>
                    <td>${sale.unitPrice * sale.cartCount}</td>
                    <td>
                      ${sale.unitPrice * sale.cartCount * (1 + sale.taxRate)}
                    </td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        )}
      </div>
      <PDFViewer style={{ width: '100%', height: '500px', marginTop: 30 }}>
        <MyDocument sales={sales} />
      </PDFViewer>
      <div className="flex justify-center items-center text-xl mt-12">
        <div className="cursor-pointer bg-blue-500 text-white font-semibold px-2 py-1 rounded-md">
          <PDFDownloadLink
            document={<MyDocument sales={sales} />}
            fileName={`sample.pdf`}
          >
            {({ blob, url, loading, error }) =>
              loading ? 'Loading document...' : 'Generate Bill'
            }
          </PDFDownloadLink>
        </div>
      </div>
    </>
  )
}

export default Main
